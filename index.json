[
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/",
	"title": "AWS Service Catalog Tools Intro Workshop",
	"tags": [],
	"description": "",
	"content": "Welcome Builders! In this workshop, we will look at how you can build on top of AWS Service Catalog using a set of open source tools to create products that address security and governance requirements. You will learn how to quickly turn a requirements into technical controls that you can demonstrate to security and governance teams within your organization.\nYou can use the arrows to move backwards and forwards through the Workshop\n "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/10-servicecatalog.html",
	"title": "AWS Service Catalog",
	"tags": [],
	"description": "",
	"content": "What is AWS Service Catalog? AWS Service Catalog Service allows organizations to create and manage catalogs of IT services that are approved for use on AWS.\nThese IT services can include everything from virtual machine images, servers, software, and databases to complete multi-tier application architectures. AWS Service Catalog allows you to centrally manage commonly deployed IT services, and helps you achieve consistent governance and meet your compliance requirements, while enabling users to quickly deploy only the approved IT services they need.\n NOTE: Whilst this Workshop makes use of AWS Service Catalog, the primary goal is to learn how to use a suite of open source tools created to compliment the native AWS service.\n "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/10-installation.html",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Prerequisites In order to install these tools you will need:\n A single AWS Account which you can log into A web browser where to access the AWS console.  You will also need to decide which account to install these tools into.\nThis account will contain the AWS CodePipelines and will need to be accessible to any accounts you would like to share products with. If you want to use the optional AWS Organizations support you will need to install the tools into an account where there is (or can be) a trust relationship with the Organizations master account. You can install these tools into your master account but this is not recommended.\nBoth tools should be installed into the same region of the same account.\nTask list Here:\n Service Catalog Factory   Service Catalog Puppet   "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/15-factory.html",
	"title": "Service Catalog Factory",
	"tags": [],
	"description": "",
	"content": " What is Service Catalog Factory Service Catalog Factory is part of a suite of open source Tools which have been built to compliment the AWS Service Catalog Service.\nService Catalog Factory enables you to quickly build AWS CodePipelines that will create Service Catalog portfolios and populate them with products across multiple regions of your AWS Account. You specify where in git the source code is for your products and you specify which regions you would like your products to exist and the framework will perform all of the undifferentiated heavy lifting for you.\nIn addition, the pipelines the framework creates can perform functional tests and static analysis on your templates to help you with your SDLC.\nService Catalog Factory allows you to define Service Catalog portfolios and products using YAML. You can version your products and specify where the source code for them can be found.\nYou can configure the frameowrk to publish the portfolios, products and versions in each of your required AWS Regions.\nHigh level architecture diagram You build products in a central hub account using AWS CodePipeline and AWS CodeBuild, you then deploy them into AWS Service Catalog in every enabled region of your hub account using AWS CodePipeline and AWS CloudFormation.\n  User interaction with the Framework is via a YAML file. The YAML file contains the definition of the Portfolios and Products you want to manage. Updates to the YAML file in AWS CodeCommit triggers the AWS CodePipeline to manage execute the tasks required.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/10-installation/20-service-catalog-factory.html",
	"title": "Service Catalog Factory",
	"tags": [],
	"description": "",
	"content": "Navigate to CloudFormation  Select the CloudFormation Service.    Confirm that you are in the eu-west-1 (Ireland) region.\n Create a new CloudFormation Stack  Select \u0026lsquo;Create Stack\u0026rsquo;    Select the pre-configured CloudFormation Template Service Catalog Factory can be installed via a pre-created CloudFormation template stored in S3 under the following URL:\n https://service-catalog-tools.s3.eu-west-2.amazonaws.com/factory/latest/servicecatalog-factory-initialiser.template.yaml\n  Paste this URL under \u0026lsquo;Amazon S3 URL\u0026rsquo;: Hit Next    Specify Stack Details  Specify the Stack details as follows:  Stack Name: factory-initialization-stack Enable Regions: eu-west-1   Hit Next    Create the CloudFormation Stack  Leave Defaults for \u0026lsquo;Configure Stack Options\u0026rsquo; Hit Next Acknowledge that the Stack will create an IAM Role Hit \u0026lsquo;Create Stack\u0026rsquo;     You will now see the Stack Status as \u0026lsquo;CREATE_IN_PROGRESS\u0026rsquo;     Wait for the Stack Status to go to CREATE_COMPLETE    What have we deployed? The following AWS resources have just been deployed into your AWS Account:\nCloudFormation Stacks The CodeBuild job created 2 CloudFormation Stacks which in turn deployed the resources listed below:\n URL: https://eu-west-1.console.aws.amazon.com/cloudformation/home?region=eu-west-1\n   Factory CodeCommit Repository This repository holds the Service Catalog Factory YAML files which are used to configure AWS Service Catalog Portfolios and Products.\n URL: https://eu-west-1.console.aws.amazon.com/codesuite/codecommit/repositories?region=eu-west-1\n   Factory CodePipeline This CodePipeline is triggered by updates to the CodeCommit Repository. When run, it will create the Service Catalog Portfolios and Products defined in the portfolio files.\n URL: https://eu-west-1.console.aws.amazon.com/codesuite/codepipeline/pipelines?region=eu-west-1\n   S3 Buckets An S3 Bucket was created to store artifacts for Service Catalog factory.\n URL: https://s3.console.aws.amazon.com/s3/home?region=eu-west-1\n   "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/20-puppet.html",
	"title": "Service Catalog Puppet",
	"tags": [],
	"description": "",
	"content": " What is Service Catalog Puppet Service Catalog Puppet is part of a suite of open source Tools which have been built to compliment the AWS Service Catalog Service.\nService Catalog Puppet enables you to provision AWS Service Catalog Products into multiple Accounts and Regions across your AWS Estate.\nThe Tool reduces the Operational burden of engineering a solution to support Portfolio Sharing and Product Launches across a large Enterprise and allows you to focus on writing the Products you require to support your Organizations needs.\nService Catalog Puppet makes use of a number of AWS Services including AWS CodePipeline, AWS CodeBuild and AWS CloudFormation to manage this for you.\nHigh-Level Architecture Diagram You use an AWS CodeBuild project in a central hub account that provisions AWS Service Catalog Products into spoke accounts on your behalf. The framework takes care of cross account sharing and cross region product replication for you.\n  User interaction with the Framework is via a YAML file. The YAML file contains the definition of the AWS Accounts you want to manage (using tags), the portfolios you want to share and the Products you want to launch.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos.html",
	"title": "How Tos",
	"tags": [],
	"description": "",
	"content": "Welcome builders From here you can see a list of our how to articles\nYou can use the left and right arrows to navigate\n  Installation   Every day use   "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/30-prerequisites.html",
	"title": "Pre-requisites",
	"tags": [],
	"description": "",
	"content": "In order to complete this workshop you will need:\n A single AWS Account which you can log into A web browser to access the AWS console  If you are taking this workshop at re:Invent 2019 you should have been given a note when you entered the workshop. This note contains all you need to log into a AWS account we have created for you.\nWe have installed the tools needed for you to get going. If you want to run through this workshop in your own account, whilst not at re:Invent please installthe tools first.\n  "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/10-installation/30-service-catalog-puppet.html",
	"title": "Service Catalog Puppet",
	"tags": [],
	"description": "",
	"content": "Navigate to CloudFormation  Select the CloudFormation Service.    Confirm you are in the eu-west-1 (Ireland) region.\n Create a new CloudFormation Stack  Select \u0026lsquo;Create Stack\u0026rsquo;    Note that the Factory Initialization Stack has been deployed. If yours has not refer to \u0026lsquo;Install Factory Process\u0026rsquo;\n Select the pre-configured CloudFormation Template Service Catalog Puppet can be installed via a pre-created CloudFormation Template stored in S3 under the following URL:\n https://service-catalog-tools.s3.eu-west-2.amazonaws.com/puppet/latest/servicecatalog-puppet-initialiser.template.yaml\n  Paste this URL under \u0026lsquo;Amazon S3 URL\u0026rsquo;: Hit Next    Specify Stack Details  Specify the Stack details as follows:  Stack Name: puppet-initialization-stack Enable Regions: eu-west-1 OrgIAMRoleArn: None ShouldCollectCloudformationEvents: false ShouldForwardEventsToEventbridge: false ShouldForwardFailuresToOpscenter: false   Hit Next    Create the Stack  Leave Defaults for \u0026lsquo;Configure Stack Options\u0026rsquo; Hit Next Acknowledge that the Stack will create an IAM Role Hit \u0026lsquo;Create Stack\u0026rsquo;     You will now see the Stack Status as \u0026lsquo;CREATE_IN_PROGRESS\u0026rsquo;     Wait for the Stack Status to go to CREATE_COMPLETE    What have we deployed? The following AWS resources have just been deployed into your AWS Account:\nCloudFormation Stacks The CodeBuild job created 2 CloudFormation Stacks which in turn deployed the resources listed below\n URL: https://eu-west-1.console.aws.amazon.com/cloudformation/home?region=eu-west-1\n   Puppet CodeCommit Repository This respository holds the Service Catalog Puppet manifest YAML file which is used to configure provisioning and sharing.\n URL: https://eu-west-1.console.aws.amazon.com/codesuite/codecommit/repositories?region=eu-west-1\n   Puppet CodePipeline This CodePipeline is triggered by updates to the CodeCommit Repository. When run, it will create the Service Catalog Portfolios and Products defined in the portfolio files.\n URL: https://eu-west-1.console.aws.amazon.com/codesuite/codepipeline/pipelines?region=eu-west-1\n   S3 Buckets Three S3 Buckets were created to store artifacts for Service Catalog Puppet.\n URL: https://s3.console.aws.amazon.com/s3/home?region=eu-west-1\n   "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use.html",
	"title": "Every day use",
	"tags": [],
	"description": "",
	"content": "Welcome builders From here you can see a list of our how to articles\nYou can use the left and right arrows to navigate\n  Creating a product   Creating a portfolio   Adding a product to a portfolio   Creating a manifest   Adding an account   Provisioning a product   Sharing a portfolio   "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1.html",
	"title": "Budget &amp; Cost governance",
	"tags": [],
	"description": "",
	"content": " The ask Cloud usage within ACME Org has picked up significantly and a number of teams are now using EC2 instances in innovative ways. The customer has noticed that teams are often not sure which EC2 instance types to use for their applications and this is leading to underutilized EC2 instances that are run on-demand. To bring down costs, the customer has purchased a set of EC2 reserved instances, based on common workload profiles, and we need to ensure the teams are using them for long running applications.\nTo help the customer, we will design and then deploy a control that gives them visibility into which EC2 instance types are being used within an AWS account.\nThe plan We are going to create and deploy a governance control using an AWS Config managed rule to ensure the right instance types are being used.\nYou can follow these steps to do this:\n Create the control   Provision the control   Future work will involve mandating that teams use only approved instance types. To start, we will gather data via AWS Config.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/100-create-the-control.html",
	"title": "Create the control",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We are going to perform the following steps:\n define a product with a version and a portfolio add the source code for the product provision that product into a spoke account  The \u0026ldquo;hub\u0026rdquo; AWS account is the source of truth for our AWS Service Catalog products. \u0026ldquo;Spoke\u0026rdquo; AWS accounts are consumers of these products.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Create the control\u0026rdquo;\nDefine a product with a version and a portfolio   Navigate to the ServiceCatalogFactory CodeCommit repository  Scroll down to the bottom of the page and hit the Create file button\n     Copy the following snippet into the main input field:    Set the File name to portfolios/reinvent.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    What did we just do? The YAML file we created in the CodeCommit repository told the framework to perform several actions:\n create a product named aws-config-desired-instance-types add a v1 of our product create a portfolio named cloud-engineering-governance add the product: aws-config-desired-instance-types to the portfolio: cloud-engineering-governance  Verify the change worked Once you have made your changes the ServiceCatalogFactory Pipelineshould have run. If you were very quick in making the change, the pipeline may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  If this is failing please raise your hand for some assistance\n Add the source code for our product When you configured your product version, you specified the following version:\nThis tells the framework the source code for the product comes from the master branch of a CodeCommit repository of the name aws-config-desired-instance-types.\nWe now need to create the CodeCommit repository and add the AWS CloudFormation template we are going to use for our product.\n  Navigate to AWS CodeCommit  Click Create repository\n     Input the name aws-config-desired-instance-types     Click Create     Scroll down to the bottom of the page and hit the Create file button     Copy the following snippet into the main input field:  Parameters:InstanceType:Type:String Description:\u0026quot;Comma separated list of EC2 instance types (for example, 't2.small, m4.large').\u0026quot;Default:\u0026quot;t2.micro, t2.small\u0026quot;Resources:AWSConfigRule:Type:AWS::Config::ConfigRuleProperties:ConfigRuleName:\u0026quot;desired-instance-type\u0026quot;Description:\u0026quot;Checks whether your EC2 instances are of the specified instance types.\u0026quot;InputParameters:instanceType:!RefInstanceTypeScope:ComplianceResourceTypes:-\u0026quot;AWS::EC2::Instance\u0026quot;Source:Owner:AWSSourceIdentifier:DESIRED_INSTANCE_TYPE  Set the File name to product.template.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n Creating that file should trigger your aws-config-desired-instance-types-v1-pipeline.\nOnce the pipeline has completed it should show the Source, Tests, Package and Deploy stages in green to indicate they have completed successfully:\n  You should see your commit message on this screen, it will help you know which version of ServiceCatalogFactory repository the pipeline is processing.\n If this is failing please raise your hand for some assistance\n Once you have verified the pipeline has run you can go to Service Catalog productsto view your newly created version.\nYou should see the product you created listed:\n  Click on the product and verify v1 is there\n  If you cannot see your version please raise your hand for some assistance\n You have now successfully created a version for your product!\nVerify the product was added to the portfolio Now that you have verified the pipeline has run you can go to Service Catalog portfoliosto view your portfolio.\n Click on reinvent-cloud-engineering-governance      Click on the product aws-config-desired-instance-types\n  Click on the version v1\n    "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/100-create-the-control.html",
	"title": "Create the control",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We are going to perform the following steps:\n define another product with a version and add it to the existing cloud-engineering-governance portfolio add the source code for our product provision that product into a spoke account  Step by step guide Here are the steps you need to follow to \u0026ldquo;Create the control\u0026rdquo;\nDefine a product with a version and a portfolio   Navigate to the ServiceCatalogFactory CodeCommit repositoryagain\n  Click on portfolios\n     Click on reinvent.yaml     Click Edit     We will need to insert the following to the products section:   Once completed it should like look this:  -Name:\u0026quot;aws-config-rds-storage-encrypted\u0026quot;Owner:\u0026quot;data-governance@acme.com\u0026quot;Description:\u0026quot;Enables AWS Config rule - aws-config-rds-storage-encrypted\u0026quot;Distributor:\u0026quot;cloud-engineering\u0026quot;SupportDescription:\u0026quot;Speak to data-governance@acme.com about exceptions and speak to cloud-engineering@acme.com about implementation issues\u0026quot;SupportEmail:\u0026quot;cloud-engineering@acme.com\u0026quot;SupportUrl:\u0026quot;https://wiki.acme.com/cloud-engineering/data-governance/aws-config-rds-storage-encrypted\u0026quot;Tags:-Key:\u0026quot;type\u0026quot;Value:\u0026quot;governance\u0026quot;-Key:\u0026quot;creator\u0026quot;Value:\u0026quot;cloud-engineering\u0026quot;-Key:\u0026quot;cost-center\u0026quot;Value:\u0026quot;governance\u0026quot;Versions:-Name:\u0026quot;v1\u0026quot;Description:\u0026quot;v1 of aws-config-rds-storage-encrypted\u0026quot;Active:TrueSource:Provider:\u0026quot;CodeCommit\u0026quot;Configuration:RepositoryName:\u0026quot;aws-config-rds-storage-encrypted\u0026quot;BranchName:\u0026quot;master\u0026quot;Portfolios:-\u0026quot;cloud-engineering-governance\u0026quot;Portfolios:-DisplayName:\u0026quot;cloud-engineering-governance\u0026quot;Description:\u0026quot;Portfolio containing the products needed to govern AWS accounts\u0026quot;ProviderName:\u0026quot;cloud-engineering\u0026quot;Associations:-\u0026quot;arn:aws:iam::${AWS::AccountId}:role/TeamRole\u0026quot;Tags:-Key:\u0026quot;type\u0026quot;Value:\u0026quot;governance\u0026quot;-Key:\u0026quot;creator\u0026quot;Value:\u0026quot;cloud-engineering\u0026quot;-Key:\u0026quot;cost-center\u0026quot;Value:\u0026quot;governance\u0026quot; Set your Author name Set your Email address Set your Commit message  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    What did we just do? The YAML we pasted in the previous step told the framework to perform several actions:\n create a product named aws-config-rds-storage-encrypted add a v1 of our product add the product: aws-config-rds-storage-encrypted to the portfolio: cloud-engineering-governance  Verify that the change worked Once you have made your changes the ServiceCatalogFactory Pipelineshould have run. If you were very quick, the pipeline may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  If this is failing please raise your hand for some assistance\n Add the source code for our product When you configured your product version, you specified the following version:\nThis tells the framework the source code for the product comes from the master branch of a CodeCommit repository of the name aws-config-rds-storage-encrypted.\nWe now need to create the CodeCommit repository and add the CloudFormation template we are going to use for our product.\n  Navigate to AWS CodeCommit  Click Create repository\n     Input the name aws-config-rds-storage-encrypted     Click Create     Scroll down to the bottom of the page and hit the Create file button     Copy the following snippet into the main input field:  Resources:AWSConfigRule:Type:AWS::Config::ConfigRuleProperties:ConfigRuleName:\u0026quot;rds-storage-encrypted\u0026quot;Description:\u0026quot;Checks whether storage encryption is enabled for your RDS DB instances.\u0026quot;Scope:ComplianceResourceTypes:-\u0026quot;AWS::RDS::DBInstance\u0026quot;Source:Owner:AWSSourceIdentifier:RDS_STORAGE_ENCRYPTED  Set the File name to product.template.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n Creating that file should trigger your aws-config-rds-storage-encrypted-v1-pipeline.\nOnce the pipeline has completed it should show the Source, Package, Package and Deploy stages in green to indicate they have completed successfully:\n  You should see your commit message on this screen, it will help you know which version of ServiceCatalogFactory repository the pipeline is processing.\n If this is failing please raise your hand for some assistance\n Once you have verified the pipeline has run you can go to Service Catalog productsto view your newly created version.\nYou should see the product you created listed:\n  Click on the product and verify v1 is there\n  If you cannot see your version please raise your hand for some assistance\n You have now successfully created a version for your product!\nVerify the product was added to the portfolio Now that you have verified the pipeline has run you can go to Service Catalog portfoliosto view your portfolio.\n Click on reinvent-cloud-engineering-governance      Click on the product aws-config-rds-storage-encrypted\n  Click on the version v1\n    "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/100-creating-a-product.html",
	"title": "Creating a product",
	"tags": [],
	"description": "",
	"content": " This tutorial will walk you through \u0026ldquo;Creating a product\u0026rdquo;\nWe will assume you have:\n installed Service Catalog Factory correctly  In the tutorial you will:\n Define the product   Add the source code   During this process you will check your progress by verifying what the framework is doing.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/100-creating-a-product/100-define-the-product.html",
	"title": "Define the product",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We are going to perform the following steps:\n create a portfolio file define a product define a version for our product commit our portfolio file verify the framework has create an AWS CodePipeline for our product version  Step by step guide Here are the steps you need to follow to \u0026ldquo;Define the product\u0026rdquo;\nCreate the portfolio file We need to tell the framework that a product exists. We do that by creating a portfolio file and by describing the products details there.\nHere is how we do this:\n Navigate to the ServiceCatalogFactory CodeCommit repository Scroll down to the bottom of the page and hit the Create file button     Copy the following snippet into the main input field:    Set the File name to portfolios/reinvent.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    We have just told the framework there is a product named aws-config-enable-config. This product has no versions and so it will not appear in AWS Service Catalog yet.\nCreate the version We now need to tell the framework we want to create a new version of our product.\n  Navigate to the ServiceCatalogFactory CodeCommit repositoryagain\n  Click on portfolios\n     Click on reinvent.yaml     Click Edit     Add the following to the end of the file (be careful with your indentation):   Verify the contents of your file matches this:  Once you have updated the file fill in the fields for Author name, Email address, Commit message and hit Commit changes\n  Using a good / unique commit message will help you understand what is going on later.\n Verify the version was created Once you have made your changes the ServiceCatalogFactory Pipelineshould have run or if you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  You should see your commit message on this screen, it will help you know which version of ServiceCatalogFactory repo the pipeline is processing.\n Now that your ServiceCatalogFactory pipeline has completed you can view the newly created pipeline: aws-config-enable-config-v1-pipelineYou can safely ignore aws-config-enable-config-v1-pipeline has failed. For the pipeline to succeed, we need to add the source code for it to work which we will do in the next step.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/150-creating-a-portfolio.html",
	"title": "Creating a portfolio",
	"tags": [],
	"description": "",
	"content": " What are we going to do? This tutorial will walk you through \u0026ldquo;Creating a portfolio\u0026rdquo; with a spoke account.\nWe will assume you have:\n installed Service Catalog Puppet correctly  We are going to perform the following steps:\n create a portfolio file define a product define a version for our product commit our portfolio file verify the framework has create an AWS CodePipeline for our product version  During this process you will check your progress by verifying what the framework is doing at each step.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Creating a portfolio\u0026rdquo;\nAdding the portfolio to the framework   Navigate to the ServiceCatalogFactory CodeCommit repository  Click on portfolios\n     Click on reinvent.yaml     Click Edit     Add the following to the end of the file (be careful with your indentation):   Verify the contents of your file matches this:  Once you have updated the file fill in the fields for Author name, Email address, Commit message and hit Commit changes\n  Using a good / unique commit message will help you understand what is going on later.\n Verify the portfolio was created Once you have made your changes the ServiceCatalogFactory Pipelineshould have run or if you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  Once you have verified the pipeline has run you can go to Service Catalog portfoliosto view your portfolio.\nYou should see the portfolio you just created listed:\n  You have now successfully created a portfolio!\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2.html",
	"title": "Data governance",
	"tags": [],
	"description": "",
	"content": " The ask ACME Org now has a number of development and test workloads in AWS. Many of these workloads make use of data storage services such as Amazon RDS and Amazon S3. The customer has recently established a dedicated data governance team, who have been tasked with identifying controls for workloads that process data classified as confidential or internal-use only.\nThe data governance team has recently issued guidelines around the use of encryption for data at rest and in transit in the cloud. We have below an excerpt from the data governance standard:\n 3.1.1 All cloud data storage systems must be configured to support encryption at rest and in transit using industry supported encryption algorithms for data classified as Confidential, or Internal-Use only. For a list of approved encryption algorithms and key-lengths please see Appendix A.\n From these guidelines there are two new requirements:\n The data governance team at ACME Org wants to get visibility into resources where encryption at rest is not being used The team wants to use AWS Service Catalog to make it easy for development teams to comply with the encryption-at-rest requirement, without having to set it up themselves.  These requirements will shape the work that goes into building additional data governance controls as development teams look to use additional AWS services to store production or material data.\nThe plan We are going to create and deploy a data governance control using an AWS Config managed rule to ensure the teams are using encryption when creating an RDS instance. We will then create a self service Service Catalog product so the teams can create compliant resources.\n Create the control   Provision the control   Create the product   "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/180-adding-a-product-to-a-portfolio.html",
	"title": "Adding a product to a portfolio",
	"tags": [],
	"description": "",
	"content": " What are we going to do? This tutorial will walk you through \u0026ldquo;Adding a product to a portfolio\u0026rdquo; into a spoke account.\nWe will assume you have:\n installed Service Catalog Puppet correctly you have created a product you have created a portfolio  We are going to perform the following steps:\n add a product to a portfolio  During this process you will check your progress by verifying what the framework is doing at each step.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Adding a product to a portfolio\u0026rdquo;\nAdd the product to the portfolio   Navigate to the ServiceCatalogFactory CodeCommit repositoryagain\n  Click on portfolios\n     Click on reinvent.yaml     Click Edit     Replace the contents of your file with this:   Take note of the highlighted lines 26 and 27. We have added a portfolio to the product.  Once you have updated the file fill in the fields for Author name, Email address, Commit message and hit Commit changes\n  Using a good / unique commit message will help you understand what is going on later.\n Verify the product was added to the portfolio Once you have made your changes the ServiceCatalogFactory Pipelineshould have run or if you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  Once you have verified the pipeline has run you can go to Service Catalog portfoliosto view your portfolio.\n Click on reinvent-cloud-engineering-governance     Click on the product aws-config-enable-config     Click on the version v1    "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/190-creating-a-manifest.html",
	"title": "Creating a manifest",
	"tags": [],
	"description": "",
	"content": " What are we going to do? This tutorial will walk you through \u0026ldquo;Creating a manifest\u0026rdquo;\nWe will assume you have:\n installed Service Catalog Puppet correctly  We are going to perform the following steps:\n create a manifest file  During this process you will check your progress by verifying what the framework is doing at each step.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Creating a manifest\u0026rdquo;\nCreating the manifest file   Navigate to the ServiceCatalogPuppet CodeCommit repository  Scroll down to the bottom of the page and hit the Create file button\n    Committing the manifest file Now that we have written the manifest file we are ready to commit it.\n  Set the File name to manifest.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/192-adding-an-account.html",
	"title": "Adding an account",
	"tags": [],
	"description": "",
	"content": " What are we going to do? This tutorial will walk you through \u0026ldquo;Adding an account\u0026rdquo;\nWe will assume you have:\n installed Service Catalog Puppet correctly created a manifest bootstrapped a spoke  We are going to perform the following steps:\n adding an account to the manifest file  During this process you will check your progress by verifying what the framework is doing at each step.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Adding an account\u0026rdquo;\nAdding an account to the manifest file   Navigate to the ServiceCatalogPuppet CodeCommit repository  Click on manifest.yaml\n  Click Edit\n      Append the following snippet to the YAML document in the main input field (be careful with your indentation):\n  Copy the following snippet into the main input field:\n   Update account_id on line to show the account id of the account you have bootstrapped  Committing the manifest file   Set the File name to manifest.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/reinvent2019/",
	"title": "AWS re:Invent 2019",
	"tags": [],
	"description": "",
	"content": "Welcome to the Service Catalog tools workshop at re:Invent 2019. In this workshop, we will walk through using Service Catalog tools to build controls for governance. At the end of the session, we hope that you will go away with tools and techniques to help you build for security and governance requirements using AWS Service Catalog.\nHouse keeping Please check through the following to help you get started.\nWhat to do if you need help Raise your hand and a helper will be with you as soon as possible.\nMeet the Team In today's workshop you have the following team\nPresenters:\n Eamonn Faherty Jamie McKay  Workshop helpers:\n Ritesh Sinha Thivan Visvanathan Alex Nicot Charles Roberts  Lets get going When you are ready, click the right arrow to begin!\nYou can use the left and right arrows to navigate through the Workshop\n "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/200-provision-the-control.html",
	"title": "Provision the control",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We are going to perform the following steps:\n create a manifest file with our account in it provision the product aws-config-desired-instance-types into our account  Step by step guide Here are the steps you need to follow to provision the control. In the previous task, we created an AWS Service Catalog product but it has not yet been provisioned.\nCreate a manifest file with our account in it   Navigate to the ServiceCatalogPuppet CodeCommit repository  Scroll down to the bottom of the page and hit the Create file button\n     Copy the following snippet into the main input field and replace account_id to show your account id on the highlighted line:  You can find your Account Number in the top right drop down of the AWS Console page. It is a 12 digit number. Please do not include the hyphens ('-') in the manifest code.\n   Provision the product aws-config-desired-instance-types into a spoke account  Append the following snippet to the end of the main input field:  The CloudFormation template we used to create this product had a parameter named InstanceType. The highlighted lines show how we can use the framework to set a value for that parameter when provisioning it.\n  The main input field should look like this (remember to set your account_id):  Committing the manifest file Now that we have written the manifest file we are ready to commit it.\n  Set the File name to manifest.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    What did we just do? The YAML file we created in the previous step told the framework to perform the following actions:\n provision a product named aws-config-desired-instance-types into each of the enabled regions of the account  When you added the following:\nYou told the framework to provision v1 of aws-config-desired-instance-types from the portfolio cloud-engineering-governance into every account that has the tag type:prod\nWithin each account there will be a copy of the product provisioned into each of the regions listed in the regions_enabled section:\nIn the workshop, you will only have permission to view the products in eu-west-1.\n Verifying the provisioned product Once you have made your changes the ServiceCatalogPuppet Pipelineshould have run. If you were quick in making the change, the pipeline may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source, Generate and Deploy stages in green to indicate they have completed successfully:\n  If this is failing please raise your hand for some assistance\n Once you have verified the pipeline has run you can go to Service Catalog provisioned productsto view your provisioned product. Please note when you arrive at the provisioned product page you will need to select account from the filter by drop down in the top right:\n  If you cannot see your product please raise your hand for some assistance\n You have now successfully provisioned a product\nVerify that the AWS Config rule is enabled To see the AWS Config rule enabled, navigate to AWS Config rules. Once there you should see the following:\n  "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/200-provision-the-control.html",
	"title": "Provision the control",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We are going to perform the following steps:\n provision the product aws-config-rds-storage-encrypted into a spoke account  Step by step guide Here are the steps you need to follow to \u0026ldquo;Provision the control\u0026rdquo;\nProvision the product aws-config-rds-storage-encrypted into a spoke account   Navigate to the ServiceCatalogPuppet CodeCommit repositoryagain\n  Click on manifest.yaml\n  Click Edit\n  Append the following snippet to the end of the main input field:\n   The main input field should look like this (remember to set your account_id):  launches:aws-config-desired-instance-types:portfolio:\u0026quot;reinvent-cloud-engineering-governance\u0026quot;product:\u0026quot;aws-config-desired-instance-types\u0026quot;version:\u0026quot;v1\u0026quot;parameters:InstanceType:default:\u0026quot;t2.medium, t2.large, t2.xlarge\u0026quot;deploy_to:tags:-tag:\u0026quot;type:prod\u0026quot;regions:\u0026quot;default_region\u0026quot;aws-config-rds-storage-encrypted:portfolio:\u0026quot;reinvent-cloud-engineering-governance\u0026quot;product:\u0026quot;aws-config-rds-storage-encrypted\u0026quot;version:\u0026quot;v1\u0026quot;deploy_to:tags:-tag:\u0026quot;type:prod\u0026quot;regions:\u0026quot;default_region\u0026quot;AWS Committing the manifest file Now that we have written the manifest file we are ready to commit it.\n Set your Author name Set your Email address Set your Commit message  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    What did we just do? The YAML we pasted in the previous step told the framework to perform the following actions:\n provision a product named aws-config-rds-storage-encrypted into each of the enabled regions of the account  Verifying the provisioning Once you have made your changes the ServiceCatalogPuppet Pipelineshould have run. If you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source, Generate and Deploy stages in green to indicate they have completed successfully:\n  If this is failing please raise your hand for some assistance\n Once you have verified the pipeline has run you can go to Service Catalog provisioned productsto view your provisioned product. Please note when you arrive at the provisioned product page you will need to select account from the filter by drop down in the top right:\n  If you cannot see your product please raise your hand for some assistance\n You have now successfully provisioned a product\nVerify the AWS Config rule is enabled To see the AWS Config rule enabled, navigate to AWS Config rules. Once there you should see the following:\n  "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/200-provisioning-a-product.html",
	"title": "Provisioning a product",
	"tags": [],
	"description": "",
	"content": " What are we going to do? This tutorial will walk you through \u0026ldquo;Provisioning a product\u0026rdquo; into a spoke account.\nWe will assume you have:\n installed Service Catalog Puppet correctly bootstrapped a spoke you have created a product you have created a portfolio  We are going to perform the following steps:\n create a manifest file add an account to the manifest file add a launch to the manifest file  During this process you will check your progress by verifying what the framework is doing at each step.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Provisioning a product\u0026rdquo;\nCreating the manifest file   Navigate to the ServiceCatalogPuppet CodeCommit repository  Scroll down to the bottom of the page and hit the Create file button\n    Adding an account to the manifest file  Copy the following snippet into the main input field:   Update account_id on line to show your account id  Adding a launch to the manifest Now we are ready to add a product to the manifest file.\n Add the following snippet to the end of the main input field:   The main input field should look like this:  Committing the manifest file Now that we have written the manifest file we are ready to commit it.\n  Set the File name to manifest.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    Verifying the provisioning Once you have made your changes the ServiceCatalogPuppet Pipelineshould have run or if you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  Once you have verified the pipeline has run you can go to Service Catalog provisioned productsto view your provisioned product. Please note when you arrive at the provisioned product page you will need to select account from the filter by drop down in the top right:\n  You have now successfully provisioned a product! When provisioned, this product will automatically enable AWS Config.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/100-creating-a-product/300-add-the-source-code.html",
	"title": "Add the source code",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We are going to perform the following steps:\n Add the source code for the version of the product we have just created  Step by step guide Here are the steps you need to follow to \u0026ldquo;Add the source code\u0026rdquo;\nAdd the source code for your product When you configured your product version, you specified the following:\nWe now need to create the CodeCommit repository and add the AWS CloudFormation template we are going to use for our product into that repository.\n  Navigate to AWS CodeCommit  Click Create repository\n     Input the name aws-config-enable-config     Click Create     Scroll down to the bottom of the page and hit the Create file button     Copy the following snippet into the main input field:  Resources:ConfigRole:Type:'AWS::IAM::Role'Description:TheIAMroleusedtoconfigureAWSConfigProperties:AssumeRolePolicyDocument:Version:2012-10-17Statement:-Effect:AllowPrincipal:Service:-config.amazonaws.comAction:-'sts:AssumeRole'ManagedPolicyArns:-arn:aws:iam::aws:policy/service-role/AWSConfigRolePolicies:-PolicyName:rootPolicyDocument:Version:2012-10-17Statement:-Effect:AllowAction:'s3:GetBucketAcl'Resource:!Subarn:aws:s3:::${S3ConfigBucket} -Effect:AllowAction:'s3:PutObject'Resource:!Subarn:aws:s3:::${S3ConfigBucket}/AWSLogs/${AWS::AccountId}/${AWS::Region} Condition:StringEquals:'s3:x-amz-acl':bucket-owner-full-control-Effect:AllowAction:'config:Put*'Resource:'*'ConfigRecorder:Type:'AWS::Config::ConfigurationRecorder'DependsOn:ConfigRoleProperties:Name:defaultRoleARN:!GetAttConfigRole.ArnDeliveryChannel:Type:'AWS::Config::DeliveryChannel'Properties:ConfigSnapshotDeliveryProperties:DeliveryFrequency:Six_HoursS3BucketName:!RefS3ConfigBucketS3ConfigBucket:DeletionPolicy:RetainDescription:S3bucketwithAES256EncryptionsetType:AWS::S3::BucketProperties:BucketName:!Subconfig-bucket-${AWS::AccountId} PublicAccessBlockConfiguration:BlockPublicAcls:TrueBlockPublicPolicy:TrueIgnorePublicAcls:TrueRestrictPublicBuckets:TrueBucketEncryption:ServerSideEncryptionConfiguration:-ServerSideEncryptionByDefault:SSEAlgorithm:AES256S3ConfigBucketPolicy:Type:AWS::S3::BucketPolicyDescription:S3bucketpolicyProperties:Bucket:!RefS3ConfigBucketPolicyDocument:Version:2012-10-17Statement:-Sid:AWSBucketPermissionsCheckEffect:AllowPrincipal:Service:-config.amazonaws.comAction:s3:GetBucketAclResource:-!Sub\u0026quot;arn:aws:s3:::${S3ConfigBucket}\u0026quot;-Sid:AWSBucketDeliveryEffect:AllowPrincipal:Service:-config.amazonaws.comAction:s3:PutObjectResource:!Sub\u0026quot;arn:aws:s3:::${S3ConfigBucket}/AWSLogs//\u0026quot;Outputs:ConfigRoleArn:Value:!GetAttConfigRole.ArnS3ConfigBucketArn:Value:!GetAttS3ConfigBucket.Arn  Set the File name to product.template.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n Creating that file should trigger your aws-config-enable-config-v1-pipeline.\nOnce the pipeline has completed it should show the Source, Package and Deploy stages in green to indicate they have completed successfully:\n  You should see your commit message on this screen, it will help you know which version of ServiceCatalogFactory repository the pipeline is processing.\n Once you have verified the pipeline has run you can go to Service Catalog productsto view your newly created version.\nYou should see the product you created listed:\n  Click on the product and verify v1 is there\n  You have now successfully created a version for your product!\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/300-create-the-product.html",
	"title": "Create the product",
	"tags": [],
	"description": "",
	"content": " What are we going to do? We previously provisioned a detective control to look for AWS RDS Instances that have don't have encryption enabled. We can do better, and create an AWS Service Catalog product that meets the encryption requirement by default using service catalog tools. When users create a new RDS instance using this product, encryption at rest is enabled by default and no further configuration is required.\nWe are going to perform the following steps:\n define a product with a version and a portfolio add the source code for our product share that portfolio with a spoke account  Step by step guide Here are the steps you need to follow to \u0026ldquo;Create the product\u0026rdquo;\nDefine a product with a version and a portfolio   Navigate to the ServiceCatalogFactory CodeCommit repositoryagain\n  Click on portfolios\n     Click on reinvent.yaml     Click Edit     Add the following to the products section:   Add the following to the portfolios section:   Once completed it should like look this:  -Name:\u0026quot;aws-config-rds-storage-encrypted\u0026quot;Owner:\u0026quot;data-governance@acme.com\u0026quot;Description:\u0026quot;Enables AWS Config rule - aws-config-rds-storage-encrypted\u0026quot;Distributor:\u0026quot;cloud-engineering\u0026quot;SupportDescription:\u0026quot;Speak to data-governance@acme.com about exceptions and speak to cloud-engineering@acme.com about implementation issues\u0026quot;SupportEmail:\u0026quot;cloud-engineering@acme.com\u0026quot;SupportUrl:\u0026quot;https://wiki.acme.com/cloud-engineering/data-governance/aws-config-rds-storage-encrypted\u0026quot;Tags:-Key:\u0026quot;type\u0026quot;Value:\u0026quot;governance\u0026quot;-Key:\u0026quot;creator\u0026quot;Value:\u0026quot;cloud-engineering\u0026quot;-Key:\u0026quot;cost-center\u0026quot;Value:\u0026quot;governance\u0026quot;Versions:-Name:\u0026quot;v1\u0026quot;Description:\u0026quot;v1 of aws-config-rds-storage-encrypted\u0026quot;Active:TrueSource:Provider:\u0026quot;CodeCommit\u0026quot;Configuration:RepositoryName:\u0026quot;aws-config-rds-storage-encrypted\u0026quot;BranchName:\u0026quot;master\u0026quot;Portfolios:-\u0026quot;cloud-engineering-governance\u0026quot;-Name:\u0026quot;rds-instance\u0026quot;Owner:\u0026quot;data-governance@acme.com\u0026quot;Description:\u0026quot;A compliant RDS Instance you can use that meets data governance standards\u0026quot;Distributor:\u0026quot;cloud-engineering\u0026quot;SupportDescription:\u0026quot;Speak to data-governance@acme.com about exceptions and speak to cloud-engineering@acme.com about implementation issues\u0026quot;SupportEmail:\u0026quot;cloud-engineering@acme.com\u0026quot;SupportUrl:\u0026quot;https://wiki.acme.com/cloud-engineering/data-governance/rds-instance\u0026quot;Options:ShouldCFNNag:TrueTags:-Key:\u0026quot;type\u0026quot;Value:\u0026quot;governance\u0026quot;-Key:\u0026quot;creator\u0026quot;Value:\u0026quot;cloud-engineering\u0026quot;Versions:-Name:\u0026quot;v1\u0026quot;Description:\u0026quot;v1 of rds-instance\u0026quot;Active:TrueSource:Provider:\u0026quot;CodeCommit\u0026quot;Configuration:RepositoryName:\u0026quot;rds-instance\u0026quot;BranchName:\u0026quot;master\u0026quot;Portfolios:-\u0026quot;cloud-engineering-self-service\u0026quot;Portfolios:-DisplayName:\u0026quot;cloud-engineering-governance\u0026quot;Description:\u0026quot;Portfolio containing the products needed to govern AWS accounts\u0026quot;ProviderName:\u0026quot;cloud-engineering\u0026quot;Associations:-\u0026quot;arn:aws:iam::${AWS::AccountId}:role/TeamRole\u0026quot;Tags:-Key:\u0026quot;type\u0026quot;Value:\u0026quot;governance\u0026quot;-Key:\u0026quot;creator\u0026quot;Value:\u0026quot;cloud-engineering\u0026quot;-Key:\u0026quot;cost-center\u0026quot;Value:\u0026quot;governance\u0026quot;-DisplayName:\u0026quot;cloud-engineering-self-service\u0026quot;Description:\u0026quot;Portfolio containing products that you can use to ensure you meet the governance guidelines\u0026quot;ProviderName:\u0026quot;cloud-engineering\u0026quot;Associations:-\u0026quot;arn:aws:iam::${AWS::AccountId}:role/TeamRole\u0026quot;Tags:-Key:\u0026quot;type\u0026quot;Value:\u0026quot;governance\u0026quot;-Key:\u0026quot;creator\u0026quot;Value:\u0026quot;cloud-engineering\u0026quot;Have a look at the highlighted lines. We are using this to turn on cfn-nag, an open source tool by Stelligent that looks for insecure configuration of resources. This will add an extra layer of governance ensuring the AWS CloudFormation templates we are using meets the quality bar set by cfn-nag.\n   Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    What did we just do? The YAML we pasted in the previous step told the framework to perform several actions:\n create a product named rds-instance add a v1 of our product create a portfolio named cloud-engineering-self-service add the product: rds-instance to the portfolio: cloud-engineering-self-service  Verify the change worked Once you have made your changes the ServiceCatalogFactory Pipelineshould have run. If you were very quick, the pipeline may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  If this is failing please raise your hand for some assistance\n Add the source code for our product When you configured your product version, you specified the following version:\nThis tells the framework the source code for the product comes from the master branch of a CodeCommit repository of the name rds-instance.\nWe now need to create the CodeCommit repository and add the AWS CloudFormation template we are going to use for our product.\n  Navigate to AWS CodeCommit  Click Create repository\n     Input the name rds-instance     Click Create     Scroll down to the bottom of the page and hit the Create file button     Copy the following snippet into the main input field:  Parameters:RdsDbMasterUsername:Description:RdsDbMasterUsernameType:String Default:someuserRdsDbMasterUserPassword:Description:RdsDbMasterUserPasswordType:String NoEcho:trueRdsDbDatabaseName:Description:DbDatabaseNameType:String Default:mysql57_databaseResources:VPC:Type:AWS::EC2::VPCProperties:CidrBlock:10.0.0.0/16EnableDnsSupport:'false'EnableDnsHostnames:'false'Subnet1:Type:AWS::EC2::SubnetProperties:VpcId:Ref:VPCCidrBlock:10.0.0.0/24AvailabilityZone:!Select[0, !GetAZs{Ref:'AWS::Region'}]\nSubnet2:Type:AWS::EC2::SubnetProperties:VpcId:Ref:VPCCidrBlock:10.0.1.0/24AvailabilityZone:!Select[1, !GetAZs{Ref:'AWS::Region'}]\nRdsDbSubnetGroup:Type:AWS::RDS::DBSubnetGroupProperties:DBSubnetGroupDescription:DatabasesubnetsforRDSSubnetIds:-!RefSubnet1-!RefSubnet2RdsSecurityGroup:Type:AWS::EC2::SecurityGroupDescription:UsedtograntaccesstoandfromtheVPCProperties:VpcId:!RefVPCGroupDescription:AllowMySQL(TCP3306) accesstoandfromtheVPCSecurityGroupIngress:-IpProtocol:tcpFromPort:3306ToPort:3306CidrIp:10.0.0.0/32SecurityGroupEgress:-IpProtocol:tcpFromPort:3306ToPort:3306CidrIp:10.0.0.0/32RdsDbClusterParameterGroup:Type:AWS::RDS::DBClusterParameterGroupProperties:Description:CloudFormationAuroraClusterParameterGroupFamily:aurora-mysql5.7Parameters:server_audit_logging:0server_audit_events:'CONNECT,QUERY,QUERY_DCL,QUERY_DDL,QUERY_DML,TABLE'RdsDbCluster:Type:AWS::RDS::DBClusterProperties:DBSubnetGroupName:!RefRdsDbSubnetGroupMasterUsername:!RefRdsDbMasterUsernameMasterUserPassword:!RefRdsDbMasterUserPasswordDatabaseName:!RefRdsDbDatabaseNameEngine:aurora-mysqlVpcSecurityGroupIds:-!RefRdsSecurityGroupDBClusterIdentifier:!Sub'${AWS::StackName}-dbcluster'DBClusterParameterGroupName:!RefRdsDbClusterParameterGroupPreferredBackupWindow:18:05-18:35RdsDbParameterGroup:Type:AWS::RDS::DBParameterGroupProperties:Description:CloudFormationAuroraParameterGroupFamily:aurora-mysql5.7Parameters:aurora_lab_mode:0general_log:1slow_query_log:1long_query_time:10RdsDbInstance:Type:AWS::RDS::DBInstanceProperties:DBSubnetGroupName:!RefRdsDbSubnetGroupDBParameterGroupName:!RefRdsDbParameterGroupEngine:aurora-mysqlDBClusterIdentifier:!RefRdsDbClusterAutoMinorVersionUpgrade:'true'PubliclyAccessible:'false'PreferredMaintenanceWindow:Thu:19:05-Thu:19:35AvailabilityZone:!Select[0, !GetAZs{Ref:'AWS::Region'}] DBInstanceClass:'db.t2.small'  Set the File name to product.template.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Click Commit changes\n  Using a good / unique commit message will help you understand what is going on later.\n Creating that file should trigger your rds-instance-v1-pipeline.\nOnce the pipeline has completed it should show the Source stage in green to indicate it has completed successfully but it should show the CFNNag action within the Tests stage as failing:\n  Clicking the Details link within the CFNNag box will bring you to the AWS CodeBuild project. When you scroll near to the bottom of that page you should see an error:\n·[0;31;49m| FAIL F26·[0m ·[0;31;49m|·[0m ·[0;31;49m| Resources: [\u0026#34;RdsDbCluster\u0026#34;]·[0m ·[0;31;49m| Line Numbers: [84]·[0m ·[0;31;49m|·[0m ·[0;31;49m| RDS DBCluster should have StorageEncrypted enabled·[0m CFNNag has determined you are not applying encryption to your DBCluster. This is a violation of the data governance guidelines and so we need to fix it.\n  Go to AWS CodeCommit  Click on the rds-instance repository\n  Click on product.template.yaml\n  Click on edit\n  Replace the contents with this:\n  Parameters:RdsDbMasterUsername:Description:RdsDbMasterUsernameType:String Default:someuserRdsDbMasterUserPassword:Description:RdsDbMasterUserPasswordType:String NoEcho:trueRdsDbDatabaseName:Description:DbDatabaseNameType:String Default:mysql57_databaseResources:VPC:Type:AWS::EC2::VPCProperties:CidrBlock:10.0.0.0/16EnableDnsSupport:'false'EnableDnsHostnames:'false'Subnet1:Type:AWS::EC2::SubnetProperties:VpcId:Ref:VPCCidrBlock:10.0.0.0/24AvailabilityZone:!Select[0, !GetAZs{Ref:'AWS::Region'}]\nSubnet2:Type:AWS::EC2::SubnetProperties:VpcId:Ref:VPCCidrBlock:10.0.1.0/24AvailabilityZone:!Select[1, !GetAZs{Ref:'AWS::Region'}]\nRdsDbSubnetGroup:Type:AWS::RDS::DBSubnetGroupProperties:DBSubnetGroupDescription:DatabasesubnetsforRDSSubnetIds:-!RefSubnet1-!RefSubnet2RdsSecurityGroup:Type:AWS::EC2::SecurityGroupDescription:UsedtograntaccesstoandfromtheVPCProperties:VpcId:!RefVPCGroupDescription:AllowMySQL(TCP3306) accesstoandfromtheVPCSecurityGroupIngress:-IpProtocol:tcpFromPort:3306ToPort:3306CidrIp:10.0.0.0/32SecurityGroupEgress:-IpProtocol:tcpFromPort:3306ToPort:3306CidrIp:10.0.0.0/32RdsDbClusterParameterGroup:Type:AWS::RDS::DBClusterParameterGroupProperties:Description:CloudFormationAuroraClusterParameterGroupFamily:aurora-mysql5.7Parameters:server_audit_logging:0server_audit_events:'CONNECT,QUERY,QUERY_DCL,QUERY_DDL,QUERY_DML,TABLE'RdsDbCluster:Type:AWS::RDS::DBClusterProperties:DBSubnetGroupName:!RefRdsDbSubnetGroupMasterUsername:!RefRdsDbMasterUsernameMasterUserPassword:!RefRdsDbMasterUserPasswordDatabaseName:!RefRdsDbDatabaseNameEngine:aurora-mysqlVpcSecurityGroupIds:-!RefRdsSecurityGroupDBClusterIdentifier:!Sub'${AWS::StackName}-dbcluster'DBClusterParameterGroupName:!RefRdsDbClusterParameterGroupPreferredBackupWindow:18:05-18:35StorageEncrypted:TrueRdsDbParameterGroup:Type:AWS::RDS::DBParameterGroupProperties:Description:CloudFormationAuroraParameterGroupFamily:aurora-mysql5.7Parameters:aurora_lab_mode:0general_log:1slow_query_log:1long_query_time:10RdsDbInstance:Type:AWS::RDS::DBInstanceProperties:DBSubnetGroupName:!RefRdsDbSubnetGroupDBParameterGroupName:!RefRdsDbParameterGroupEngine:aurora-mysqlDBClusterIdentifier:!RefRdsDbClusterAutoMinorVersionUpgrade:'true'PubliclyAccessible:'false'PreferredMaintenanceWindow:Thu:19:05-Thu:19:35AvailabilityZone:!Select[0, !GetAZs{Ref:'AWS::Region'}] DBInstanceClass:'db.t2.small'StorageEncrypted:TruePlease observe the highlighted lines showing where we have made a change. We have added:\nStorageEncrypted: True  Set your Author name Set your Email address Set your Commit message Click Commit changes  Using a good / unique commit message will help you understand what is going on later.\n Creating that file should trigger your rds-instance-v1-pipeline.\nOnce the pipeline has completed it should show the Source and Tests stages in green to indicate they have completed successfully:\n  You should see your commit message on this screen, it will help you know which version of ServiceCatalogFactory repository the pipeline is processing.\n If this is failing please raise your hand for some assistance\n Once you have verified the pipeline has run you can go to Service Catalog productsto view your newly created version.\nYou should see the product you created listed:\n  Click on the product and verify v1 is there\n  If you cannot see your version please raise your hand for some assistance\n You have now successfully created a version for your product!\nVerify that the product was added to the portfolio Now that you have verified the pipeline has run you can go to Service Catalog portfoliosto view your portfolio.\n Click on cloud-engineering-self-service      Click on the product rds-instance\n  Click on the version v1\n    Share portfolio with a spoke account   Navigate to the ServiceCatalogPuppet CodeCommit repositoryagain\n  Click on manifest.yaml\n  Click Edit\n     Append the following snippet to the YAML document in the main input field (be careful with your indentation):   The main input field should look like this:  launches:aws-config-desired-instance-types:portfolio:\u0026quot;reinvent-cloud-engineering-governance\u0026quot;product:\u0026quot;aws-config-desired-instance-types\u0026quot;version:\u0026quot;v1\u0026quot;parameters:InstanceType:default:\u0026quot;t2.medium, t2.large, t2.xlarge\u0026quot;deploy_to:tags:-tag:\u0026quot;type:prod\u0026quot;regions:\u0026quot;default_region\u0026quot;aws-config-rds-storage-encrypted:portfolio:\u0026quot;reinvent-cloud-engineering-governance\u0026quot;product:\u0026quot;aws-config-rds-storage-encrypted\u0026quot;version:\u0026quot;v1\u0026quot;deploy_to:tags:-tag:\u0026quot;type:prod\u0026quot;regions:\u0026quot;default_region\u0026quot;spoke-local-portfolios:cloud-engineering-self-service:portfolio:\u0026quot;reinvent-cloud-engineering-self-service\u0026quot;deploy_to:tags:-tag:\u0026quot;type:prod\u0026quot;regions:\u0026quot;default_region\u0026quot;Committing the manifest file   Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    Verifying the sharing Once you have made your changes the ServiceCatalogPuppet Pipelineshould have run. If you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  If this is failing please raise your hand for some assistance\n Once you have verified the pipeline has run you can go to Service Catalog portfoliosto view your shared product.\nWhen you share a portfolio the framework will decide if it should share the portfolio. If the target account is the same as the factory account it will not share the portfolio as it is not needed.\nIf you cannot see your product please raise your hand for some assistance\n "
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/30-how-tos/50-every-day-use/300-sharing-a-portfolio.html",
	"title": "Sharing a portfolio",
	"tags": [],
	"description": "",
	"content": " What are we going to do? This tutorial will walk you through \u0026ldquo;Sharing a portfolio\u0026rdquo; with a spoke account.\nWe will assume you have:\n installed Service Catalog Puppet correctly bootstrapped a spoke you have created a product you have created a portfolio  We are going to perform the following steps:\n create a manifest file add an account to the manifest file add a spoke-local-portfolios to the manifest file  During this process you will check your progress by verifying what the framework is doing at each step.\nStep by step guide Here are the steps you need to follow to \u0026ldquo;Sharing a portfolio\u0026rdquo;\nCreating the manifest file   Navigate to the ServiceCatalogPuppet CodeCommit repository  Scroll down to the bottom of the page and hit the Create file button\n    Adding an account to the manifest file We will start out by adding your account to the manifest file.\n  Navigate to the ServiceCatalogPuppet CodeCommit repository  Scroll down to the bottom of the page and hit the Create file button\n     Copy the following snippet into the main input field:   Update account_id on line to show your account id  Adding spoke-local-portfolio to the manifest Now we are ready to add a product to the manifest file.\n Add the following snippet to the end of the main input field:   The main input field should look like this:  Committing the manifest file Now that we have written the manifest file we are ready to commit it.\n  Set the File name to manifest.yaml\n  Set your Author name\n  Set your Email address\n  Set your Commit message\n  Using a good / unique commit message will help you understand what is going on later.\n  Click the Commit changes button:    Verifying the sharing Once you have made your changes the ServiceCatalogPuppet Pipelineshould have run or if you were quick may still be running. If it has not yet started feel free to the hit the Release change button.\nOnce it has completed it should show the Source and Build stages in green to indicate they have completed successfully:\n  Once you have verified the pipeline has run you can go to Service Catalog portfoliosto view your shared product.\nWhen you share a portfolio the framework will decide if it should share the portfolio. If the target account is the same as the factory account it will not share the portfolio as it is not needed.\n"
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/999-further_reading.html",
	"title": "Further Reading",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/999-further_reading/9999-links_and_further_reading.html",
	"title": "Links and further reading",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://aws-samples.github.io/aws-service-catalog-tools-workshop/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]