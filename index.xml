<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Service Catalog Tools Intro Workshop on Service Catalog Tools Workshop</title>
    <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/</link>
    <description>Recent content in AWS Service Catalog Tools Intro Workshop on Service Catalog Tools Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://aws-samples.github.io/aws-service-catalog-tools-workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Puppet account</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/20-bootstrapping/10-puppet-account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/20-bootstrapping/10-puppet-account.html</guid>
      <description>Navigate to CloudFormation  Select the AWS CloudFormation service.    Confirm you are in the eu-west-1 (Ireland) region.
 Create a new AWS CloudFormation stack  Select &amp;lsquo;Create Stack&amp;rsquo;    Note that the Factory Initialization Stack has been deployed. If yours has not refer to &amp;lsquo;Install Factory Process&amp;rsquo;
 Select the pre-configured AWS CloudFormation template Service Catalog Puppet can be installed via a pre-created AWS CloudFormation template stored in Amazon S3 under the following URL:</description>
    </item>
    
    <item>
      <title>Starter framework</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/design-considerations/multi-account-strategy/starter-framework.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/design-considerations/multi-account-strategy/starter-framework.html</guid>
      <description>What are we going to do? This article will explain the starter multi-account framework
Starter framework Within your AWS Organization there are two types of Organizational Units (OUs) - foundational and additional.
The Foundational OUs group the shared accounts needed to manage the your overall AWS environment. The areas considered foundational are security, networking and logs. Each of the AWS Accounts within the foundational OUs are grouped into production and non-production environments in order to clearly distinguish between production and non production policies.</description>
    </item>
    
    <item>
      <title>Using AWS Organizations</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/10-using-aws-organizations.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/10-using-aws-organizations.html</guid>
      <description>You can use Service Catalog Puppet with AWS Organizations. Using it will allow you describe all accounts within an organizational unit as a single entity. This provides a quicker way to get started and an easier way of managing multiple account environments.
If you do not want to use Organizations please skip to the next section of this how to.
What are we going to do? When enabling AWS Organizations you will need to provision an IAM Role in the Organizations master account and you will then need to provide the ARN of that role to your puppet account as an AWS SSM parameter.</description>
    </item>
    
    <item>
      <title>Service Catalog Factory</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/20-service-catalog-factory.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/20-service-catalog-factory.html</guid>
      <description>Navigate to CloudFormation  Select the AWS CloudFormation Service.    Confirm that you are in the eu-west-1 (Ireland) region.
 Create a new CloudFormation Stack  Select &amp;lsquo;Create Stack&amp;rsquo;    Select the pre-configured CloudFormation Template Service Catalog Factory can be installed via a pre-created AWS CloudFormation template stored in Amazon S3 under the following URL:
 https://service-catalog-tools.s3.eu-west-2.amazonaws.com/factory/latest/servicecatalog-factory-initialiser.template.yaml
  Paste this URL under &amp;lsquo;Amazon S3 URL&amp;rsquo;: Hit Next    Specify Stack Details  Specify the Stack details as follows:  Stack Name: factory-initialization-stack Enable Regions: eu-west-1   Hit Next    Create the CloudFormation Stack  Leave Defaults for &amp;lsquo;Configure Stack Options&amp;rsquo; Hit Next Acknowledge that the Stack will create an IAM Role Hit &amp;lsquo;Create Stack&amp;rsquo;     You will now see the stack status as CREATE_IN_PROGRESS     Wait for the stack status to go to CREATE_COMPLETE    What have we deployed?</description>
    </item>
    
    <item>
      <title>Single spokes</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/20-bootstrapping/20-single-spokes.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/20-bootstrapping/20-single-spokes.html</guid>
      <description>What are we going to do? You will need to bootstrap spoke accounts so you can share portfolios with them and provision products into them.
Bootstrapping a spoke account will create an AWS CloudFormation stack in it. This stack will contain the Puppet IAM Role (PuppetRole) which is needed by framework to perform actions in the spoke account.
Using the CLI The following steps should be executed using the Service Catalog Puppet CLI which is an application built using Python 3.</description>
    </item>
    
    <item>
      <title>Groups of spokes</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/20-bootstrapping/30-groups-of-spokes.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/installation/30-service-catalog-puppet/20-bootstrapping/30-groups-of-spokes.html</guid>
      <description>What are we going to do? If you have enabled AWS Organizations support you may want to bootstrap all spokes within an organizational unit.
Following these steps will allow you to bootstrap all AWS Accounts that exist within the same organizational unit.
Using the CodeBuild Project In your AWS Account you can find an AWS CodeBuild project named: servicecatalog-puppet-bootstrap-an-ou
  Click Start Build
  Before you select Start Build again, expand the Environment variables override section.</description>
    </item>
    
    <item>
      <title>Create the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/100-create-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/100-create-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 define a product with a version and a portfolio in a hub account add the source code for the product provision that product into a spoke account  The hub AWS Account is the source of truth for our AWS Service Catalog products. Spoke AWS accounts are consumers of these products, you can think of them as accounts that need governance controls applied.</description>
    </item>
    
    <item>
      <title>Create the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/100-create-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/100-create-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 define another product with a version and add it to the existing cloud-engineering-governance portfolio add the source code for our product provision that product into a spoke account  Step by step guide Here are the steps you need to follow to &amp;ldquo;Create the control&amp;rdquo;
Define a product with a version and a portfolio   Navigate to the ServiceCatalogFactory CodeCommit repository again</description>
    </item>
    
    <item>
      <title>Define the product</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/100-define-the-product.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/100-define-the-product.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 create a portfolio file define a product define a version for our product commit our portfolio file verify the framework has create an AWS CodePipeline for our product version  Step by step guide Here are the steps you need to follow to &amp;ldquo;Define the product&amp;rdquo;
Create the portfolio file We need to tell the framework that a product exists.</description>
    </item>
    
    <item>
      <title>Disabling the product versions</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/100-disabling-the-product-versions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/100-disabling-the-product-versions.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 disable a product version  Step by step guide Here are the steps you need to follow to &amp;ldquo;Disabling the product versions&amp;rdquo;
Disable the product version When working with other teams it is recommended that you disable a product version before you delete it. This gives teams time to react before deletion of the product.</description>
    </item>
    
    <item>
      <title>Running yourself</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/30-prerequisites/100-running-yourself.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/30-prerequisites/100-running-yourself.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Enable AWS Config Install the tools Create an IAM Role  In order to run the workshop in your own account you will need to enable AWS Config and create an IAM Role named TeamRole which you must then assume in order to complete the activities.
Step by step guide Here are the steps you need to follow to &amp;ldquo;Running yourself&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Provision the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/200-provision-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/100-task-1/200-provision-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 create a manifest file with our account in it provision the product aws-config-desired-instance-types into our account  Step by step guide Here are the steps you need to follow to provision the control. In the previous task, we created an AWS Service Catalog product but it has not yet been provisioned.
Create a manifest file with our account in it   Navigate to the ServiceCatalogPuppet CodeCommit repository</description>
    </item>
    
    <item>
      <title>Provision the control</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/200-provision-the-control.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/200-provision-the-control.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 provision the product aws-config-rds-storage-encrypted  For this workshop, we are using the same account as both the hub and spoke for simplicity; in a multi-account setup, products that are created in a hub account could be provisioned in multiple spoke accounts.
Step by step guide Here are the steps you need to follow to &amp;ldquo;Provision the control&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Add the source code</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/300-add-the-source-code.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/100-creating-a-product/300-add-the-source-code.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 Add the source code for the version of the AWS Service Catalog product we have just created  Step by step guide Here are the steps you need to follow to &amp;ldquo;Add the source code&amp;rdquo;
Add the source code for your product When you configured your product version, you specified the following:
 Versions: - Name: &amp;#34;v1&amp;#34; Description: &amp;#34;v1 of aws-config-enable-config&amp;#34; Active: True Source: Provider: &amp;#34;CodeCommit&amp;#34; Configuration: RepositoryName: &amp;#34;aws-config-enable-config&amp;#34; BranchName: &amp;#34;master&amp;#34;   We now need to create the AWS CodeCommit repository and add the AWS CloudFormation template we are going to use for our product into that repository.</description>
    </item>
    
    <item>
      <title>Create the product</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/300-create-the-product.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/40-reinvent2019/150-task-2/300-create-the-product.html</guid>
      <description>What are we going to do? We have provisioned a detective control to look for AWS RDS Instances that have don&#39;t have encryption enabled. We can do better, and create an AWS Service Catalog product that meets the encryption requirement by default using service catalog tools. When users create a new RDS instance using this product, encryption at rest is enabled by default and no further configuration is required.</description>
    </item>
    
    <item>
      <title>Deleting the product</title>
      <link>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/300-deleting-the-product.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aws-samples.github.io/aws-service-catalog-tools-workshop/every-day-use/110-deleting-a-product/300-deleting-the-product.html</guid>
      <description>What are we going to do? We are going to perform the following steps:
 delete a product version delete a product  Step by step guide Here are the steps you need to follow to &amp;ldquo;Deleting the product&amp;rdquo;
Delete a product version When you are ready to delete a product version you will need to edit its definition in the portfolio yaml.
  Navigate to the ServiceCatalogFactory CodeCommit repository</description>
    </item>
    
  </channel>
</rss>